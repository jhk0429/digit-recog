# -*- coding: utf-8 -*-
"""
Created on Mon Aug 12 05:54:31 2019

@author: Alvin Kim
"""

import numpy as np
import pandas as pd
%matplotlib inline
import matplotlib.pyplot as plt
import tensorflow.compat.v1 as tf
tf.disable_v2_behavior()

"""HYPER-PARAMETERS"""
LR = 1e-4
ITER = 10000       
BATCH_SIZE = 32
VALIDATION_SIZE = 5000

"""FEATURE ENGINEERING"""
train = pd.read_csv("C:/Users/Alvin Kim/Downloads/DIGIT/train.csv")

images = train.iloc[:,1:].values.astype(np.float) 
images = np.multiply(images, 1.0 / 255.0) #map to 0:1

image_size = images.shape[1] #784
image_width = image_height = np.ceil(np.sqrt(image_size)).astype(np.uint8) #28*28

#Try depicting images
def display(image):
    one_image = image.reshape(image_width,image_height) #784 => 28*28
    plt.imshow(one_image)
#Can try some examples  
#display(images[3])
    
labels = train.iloc[:,0].values #[1,4,3,0,9, ...] collection
type_labels = np.unique(labels).shape[0] #10

def dense_to_one_hot(labels_dense, num_classes):
    num_labels = labels_dense.shape[0] #42000
    index_offset = np.arange(num_labels) * num_classes #[0 10 20 ... 419,990]
    labels_one_hot = np.zeros((num_labels, num_classes)) #42000*10 zeros
    labels_one_hot.flat[index_offset + labels_dense] = 1 #[4:1, 13:1, 22:1, 35:1, ... 419999:1]
    return labels_one_hot

labels = dense_to_one_hot(labels, type_labels).astype(np.uint8)

#######################VAL & TRAIN
validation_images, train_images = images[:VALIDATION_SIZE], images[VALIDATION_SIZE:]
validation_labels, train_labels = labels[:VALIDATION_SIZE], labels[VALIDATION_SIZE:]

###WEIGHT init: 784^2 = 614656 
def weight_variable(shape):
    initial = tf.truncated_normal(shape, stddev=0.01) #input size: 784. stddev smaller the better.
    return tf.Variable(initial)

def conv2d(x, W): #x: input_img, W: filter, 1stride, same padding.
    return tf.nn.conv2d(x, W, strides=[1, 1, 1, 1], padding='SAME')

def max_pool_2x2(x):
    return tf.nn.max_pool(x, ksize=[1, 2, 2, 1], strides=[1, 2, 2, 1], padding='SAME')

def batch_norm_cnn(batch_image, depth) :
    epsilon = 1e-5
    beta = tf.Variable(tf.constant(0.0, shape=[depth]), trainable=True)
    gamma = tf.Variable(tf.constant(1.0, shape=[depth]), trainable=True)
    mean, variance = tf.nn.moments(batch_image, axes=[0, 1, 2])
    norm_batch = tf.nn.batch_normalization(batch_image, mean, variance, beta, gamma, epsilon)
    return norm_batch

def batch_norm_flat(batch_flat) :
    epsilon = 1e-5
    beta = tf.Variable(tf.constant(0.0, shape=[1]), trainable=True)
    gamma = tf.Variable(tf.constant(1.0, shape=[1]), trainable=True)
    mean, variance = tf.nn.moments(batch_flat, axes=[0])
    norm_batch = tf.nn.batch_normalization(batch_flat, mean, variance, beta, gamma, epsilon)
    return norm_batch

x = tf.placeholder('float', shape=[None, image_size]) #784 
y_ = tf.placeholder('float', shape=[None, type_labels]) #10 #will feed these later

W_conv1 = weight_variable([3, 3, 1, 32]) # 32 => 28 after first conv. Applying 5*5 filter
image = tf.reshape(x, [-1,image_width, image_height,1])

"""START MAKING NN"""
"""FIRST CONV LAYER"""
""" Since we are using Convolutional NN + Batch Normalization,
Dropout and bias terms are all delted for faster implementation. """
h_conv1 = tf.nn.relu(batch_norm_cnn(conv2d(image, W_conv1),32)) # applying relu to BN + conv. 32feats.
#print (h_conv1.get_shape()) # => (40000, 28, 28, 32)
h_pool1 = max_pool_2x2(h_conv1)
#print (h_pool1.get_shape()) # => (40000, 14, 14, 32)

# Prepare for visualization
# display 32 features in 4 by 8 grid
#layer1 = tf.reshape(h_conv1, (-1, image_height, image_width, 4 ,8))  
#print (layer1.get_shape()) # => (40000,28,28,4,8)
# reorder so the channels are in the first dimension, x and y follow.
#layer1 = tf.transpose(layer1, (0, 3, 1, 4,2))
#layer1 = tf.reshape(layer1, (-1, image_height*4, image_width*8))
"""SECOND CONV LAYER"""
W_conv2 = weight_variable([3, 3, 32, 64]) #3*3 filter, 32in, 64out
h_conv2 = tf.nn.relu(batch_norm_cnn(conv2d(h_pool1, W_conv2), 64))
#print (h_conv2.get_shape()) # => (40000, 14,14, 64)
h_pool2 = max_pool_2x2(h_conv2)
#print (h_pool2.get_shape()) # => (40000, 7, 7, 64)
# Prepare for visualization
# display 64 fetures in 4 by 16 grid
#layer2 = tf.reshape(h_conv2, (-1, 14, 14, 4 ,16))  
# reorder so the channels are in the first dimension, x and y follow.
#layer2 = tf.transpose(layer2, (0, 3, 1, 4,2))
#layer2 = tf.reshape(layer2, (-1, 14*4, 14*16)) 
"""THIRD FULLY CONNECTED LAYER"""
W_fc1 = weight_variable([7 * 7 * 64, 256])
# (40000, 7, 7, 64) => (40000, 3136)
h_pool2_flat = tf.reshape(h_pool2, [-1, 7*7*64])
h_fc1 = tf.nn.relu(batch_norm_flat(tf.matmul(h_pool2_flat, W_fc1)))
#print (h_fc1.get_shape()) # => (40000, 1024)
"""Output Layer. Softmax for multi-classification problem"""
W_fc2 = weight_variable([256, type_labels])
y = tf.nn.softmax(tf.matmul(h_fc1, W_fc2))
#print (y.get_shape()) # => (40000, 10)
####################################################
cross_entropy = -tf.reduce_sum(y_*tf.log(y))
# optimisation function
train_step = tf.train.AdamOptimizer(LR).minimize(cross_entropy)
# evaluation 
correct_prediction = tf.equal(tf.argmax(y,1), tf.argmax(y_,1)) #largest index(=label) in each data?
accuracy = tf.reduce_mean(tf.cast(correct_prediction, 'float')) #0.96...
predict = tf.argmax(y,1) #for each examples on test set, find label with highest value

epochs_completed = 0
index_in_epoch = 0
num_examples = train_images.shape[0] #41000

# serve data by batches
def next_batch(batch_size):
    global train_images
    global train_labels
    global index_in_epoch
    global epochs_completed
    
    start = index_in_epoch
    index_in_epoch += batch_size
    # shuffle when num_of_batches exceed train size  
    if index_in_epoch > num_examples: #41000
        # finished epoch
        epochs_completed += 1
        perm = np.arange(num_examples)
        np.random.shuffle(perm)
        train_images = train_images[perm]
        train_labels = train_labels[perm]
        # start next epoch
        start = 0
        index_in_epoch = batch_size
        assert batch_size <= num_examples
    end = index_in_epoch
    return train_images[start:end], train_labels[start:end]

"""STARTING TF SESSION - initialize variables"""
init = tf.initialize_all_variables()
sess = tf.InteractiveSession()
sess.run(init)

# To show progress....
train_accuracies = []
validation_accuracies = []
x_range = []

display_step=1

for i in range(ITER): #2500
    #get new batch
    batch_xs, batch_ys = next_batch(BATCH_SIZE)        
    # print and check progress on every 1st,2nd,...,10th,20th,...,100th... step
    if i%display_step == 0 or (i+1) == ITER:
        train_accuracy = accuracy.eval(feed_dict={x: batch_xs, 
                                                  y_: batch_ys})       
        if(VALIDATION_SIZE):
            validation_accuracy = accuracy.eval(feed_dict={ x: validation_images[0:BATCH_SIZE], 
                                                            y_: validation_labels[0:BATCH_SIZE]})                                  
            print('training_accuracy / validation_accuracy => %.3f / %.3f for step %d'%(train_accuracy, validation_accuracy, i))
            validation_accuracies.append(validation_accuracy)
        else:
             print('training_accuracy => %.4f for step %d'%(train_accuracy, i))
        train_accuracies.append(train_accuracy)
        x_range.append(i)
        # increase display_step
        if i%(display_step*10) == 0 and i: #i=10
            display_step *= 10
    # train on batch
    sess.run(train_step, feed_dict={x: batch_xs, y_: batch_ys})
    

# check final accuracy on validation set  
if(VALIDATION_SIZE):
    validation_accuracy = accuracy.eval(feed_dict={x: validation_images, 
                                                   y_: validation_labels})
    print('validation_accuracy => %.4f'%validation_accuracy)
    plt.plot(x_range, train_accuracies,'-b', label='Training')
    plt.plot(x_range, validation_accuracies,'-g', label='Validation')
    plt.legend(loc='lower right')
    plt.ylim(ymax = 1.05, ymin = 0.7)
    plt.ylabel('accuracy')
    plt.xlabel('step')
    plt.show()

"""START USING TEST IMAGES"""

test_images = pd.read_csv("C:/Users/Alvin Kim/Downloads/DIGIT/test.csv").values.astype(np.float)
test_images = np.multiply(test_images, 1.0 / 255.0)

# predict test set
#predicted_labels = predict.eval(feed_dict={x: test_images})
# using batches is more resource efficient
predicted_labels = np.zeros(test_images.shape[0])
for i in range(0,test_images.shape[0]//BATCH_SIZE):
    predicted_labels[i*BATCH_SIZE : (i+1)*BATCH_SIZE] = predict.eval(feed_dict={x: test_images[i*BATCH_SIZE : (i+1)*BATCH_SIZE]})

#print('predicted_labels({0})'.format(len(predicted_labels)))

# output test image and prediction
#display(test_images[10200])
#print ('predicted_labels[{0}] => {1}'.format(10200,predicted_labels[10200]))

# ##save results
np.savetxt('submission_softmax4.csv', 
           np.c_[range(1,len(test_images)+1),predicted_labels], 
           delimiter=',', 
           header = 'ImageId,Label', 
           comments = '', 
           fmt='%d')


sess.close()
